version:  '2'

services:

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    network_mode: host
    ports:
    - "2181:2181"
    expose:
    - "2181"
    environment:
     ZOOKEEPER_CLIENT_PORT: 2181
     ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
    - "9092:9092"
    expose:
    - 9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
#      KAFKA_CREATE_TOPICS: "education:1:1"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: localhost:2181
    volumes:
    - '/var/run/docker.sock:/var/run/docker.sock'
    depends_on:
    - "zookeeper"
#    restart: always

  input-kafka:
    image: input-kafka
    build: input-kafka/
    container_name: "input-kafka"
    network_mode: host
    depends_on:
    - kafka
    ports:
    - "8184:8184"
    expose:
    - "8184"

  input-lemmatize:
    image: input-lemmatize
    build: input-lemmatize/
    container_name: "input-lemmatize"
    network_mode: host
    depends_on:
    - kafka
    ports:
    - "8140:8140"
    expose:
    - "8140"

  input-postag:
    image: input-postag
    build: input-postag/
    container_name: "input-postag"
    network_mode: host
    depends_on:
    - kafka
    ports:
    - "8142:8142"
    expose:
    - "8142"

  input-tagger:
    image: input-tagger
    build: input-tagger/
    container_name: "input-tagger"
    network_mode: host
    depends_on:
    - kafka
    ports:
    - "8144:8144"
    expose:
    - "8144"

#  queryEngine:
#    image: queryEngine
#    build: queryEngine/
#    container_name: "queryEngine"
#    network_mode: host
#    depends_on:
#    - kafka
#    ports:
#    - "8185:8185"
#    expose:
#    - "8185"

#  neo4j:
#    image: tpires/neo4j
#    env_file: .env
#    cap_add:
#    - SYS_RESOURCE
#    ports:
#   - "7474:7474"



  mysql:

    image: mysql:5.7
    ports:
      - 3306:3306
    container_name: mysql
    environment:
      - MYSQL_USER = root
      - MYSQL_ROOT_PASSWORD = root
      - MYSQL_DATABASE = login
    volumes:
      - '/opt/datasql:/var/lib/mysql'
    network_mode: "host"
    hostname: localhost
#    restart: always

  mongodb:
    image: mongo:3.2-jessie
    ports:
    - 27017:27017
    container_name: "mongo-knowledgevault"
    network_mode: host
    volumes:
    - '../data/mongo:/data/db'
    environment:
      MONGO_INITDB_DATABASE: userDetails

  user-registration:
    image: user-registration
    build: user-registration-service/
    container_name: user-registration
    network_mode: host
    depends_on:
    - kafka
    - mongodb
    ports:
    - "8182:8182"
    expose:
    - "8182"

  user-authentication:
    image: user-authentication
    build: user-authentication-service/
    container_name: user-registration-container
    network_mode: host
    depends_on:
    - kafka
    - mysql
    ports:
    - "8184:8184"
    expose:
    - "8184"
  
  angular:
    image: angular
    build: angular/.
#    depends_on:
#    - gateway
    ports:
    - "4200:4200"
    expose:
    - "4200"
    container_name: "angular"

#  gateway:
#    image: zuulgateway:v1
#    build: zuulgateway/
#    restart: always
#    container_name: zuul-container
#    network_mode: host
#    depends_on:
#    - mongodb
#    ports:
#    - 8081:8081
#    expose:
#    - 8081
